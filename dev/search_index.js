var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LocalCustoms","category":"page"},{"location":"#LocalCustoms","page":"Home","title":"LocalCustoms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LocalCustoms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LocalCustoms]","category":"page"},{"location":"#LocalCustoms.@local_-Tuple{Expr}","page":"Home","title":"LocalCustoms.@local_","text":"@local_ import ModuleName\n@local_ import ModuleName: name\n@local_ import ModuleName: name1, name2, ...\n\nImport names belonging to a local module (i.e. already in the namespace).\n\nDo not include a . before the module name!\n\nWhen only a composite ModuleName is provided (e.g. Gadgets.Things.Doohickies),     the innermost module (i.e. Doohickies) is imported into the active namespace.\n\nOtherwise, this macro is just a verbose way of avoiding the .. :)\n\n@local_ export ModuleName\n@local_ export ModuleName: name\n@local_ export ModuleName: name1, name2, ...\n\nExport names belonging to a local module (i.e. already in the namespace).\n\nDo not include a . before the module name!\n\nThe point of this macro is to export names of a subordinate module     without having to (explicitly) import them first.\n\nWhen a nested module is provided (e.g. Gadgets.Things.Doohickies),     ...this macro doesn't work. Sorry. The Julia parser doesn't expect any operators after an export name. It's a total fluke that the : signatures parse as expressions at all. You can use the alternative macro @localexport for such cases.\n\n\n\n\n\n","category":"macro"},{"location":"#LocalCustoms.@localexport-Tuple{Any, Vararg{Any}}","page":"Home","title":"LocalCustoms.@localexport","text":"@localexport ModuleName\n@localexport ModuleName name1\n@localexport ModuleName name1 name2 ...\n\nExport names belonging to a local module (i.e. already in the namespace).\n\nDo not include a . before the module name!\n\nThe chief difference between this macro and @local_ export is that     this macro supports a composite ModuleName like Gadgets.Things.Doohickies.\n\nWhen only a composite ModuleName is provided (e.g. Gadgets.Things.Doohickies),     the innermost module (i.e. Doohickies) is exported from the active namespace.\n\n\n\n\n\n","category":"macro"},{"location":"#LocalCustoms.@localimport-Tuple{Any, Vararg{Any}}","page":"Home","title":"LocalCustoms.@localimport","text":"@localimport ModuleName\n@localimport ModuleName name1\n@localimport ModuleName name1 name2 ...\n\nImport names belonging to a local module (i.e. already in the namespace).\n\nDo not include a . before the module name!\n\nThe only difference between this macro and @local_ import is the syntax. Both are provided for the sake of symmetry with exports.\n\nWhen only a composite ModuleName is provided (e.g. Gadgets.Things.Doohickies),     the innermost module (i.e. Doohickies) is imported into the active namespace.\n\n\n\n\n\n","category":"macro"}]
}
